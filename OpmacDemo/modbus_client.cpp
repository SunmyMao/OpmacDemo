#include "modbus_client.h"

#include <qtextformat.h>
#include <QThread>

namespace modbus
{

    /* Table of CRC values for low-order byte */
    static const uint8_t table_crc_lo[] = {
        0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5,
        0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B,
        0xC9, 0x09, 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE,
        0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6,
        0xD2, 0x12, 0x13, 0xD3, 0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
        0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D,
        0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8,
        0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C,
        0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21,
        0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
        0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A,
        0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA,
        0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 0x77, 0xB7,
        0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91, 0x51,
        0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
        0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98,
        0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D,
        0x4C, 0x8C, 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83,
        0x41, 0x81, 0x80, 0x40 };

    /* Table of CRC values for high-order byte */
    static const uint8_t table_crc_hi[] = {
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
        0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
        0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1,
        0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
        0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1,
        0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
        0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
        0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
        0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40 };

    static uint16_t crc16(uint8_t* buffer, uint16_t buffer_length)
    {
        uint8_t crc_hi = 0xFF;  /* high CRC byte initialized */
        uint8_t crc_lo = 0xFF;  /* low CRC byte initialized */
        unsigned int i = 0;     /* will index into CRC lookup */

        /* pass through message buffer */
        while (buffer_length--)
        {
            i = crc_lo ^ *buffer++; /* calculate the CRC  */
            crc_lo = crc_hi ^ table_crc_hi[i];
            crc_hi = table_crc_lo[i];
        }

        return (crc_hi << 8 | crc_lo);
    }

    static void wait_for_3_5_byte(int32_t baudRate)
    {
        if (baudRate <= 0)
            baudRate = 9600;

        double charTimeMs = (11.0 / baudRate) * 1000.0;
        double delayMs = 3.5 * charTimeMs;

        int delayMsRounded = std::max(qCeil(delayMs), 1);

        QThread::msleep(delayMsRounded);
    }

    static bool _is_read_request(uint8_t func_code)
    {
        return func_code == 0x03 || func_code == 0x04;
    }

    uint16_t Request::response_buffer_size()
    {
        if (_is_read_request(_func_code))
            return 1 + 1 + 1 + 2 * _register_coil_count + 2;
        if (_func_code == 0x06)
            return 1 + 1 + 2 + 2 + 2; // slaveid(1byte)_functioncode(1byte)_address(2bytes)_value(2bytes)_crc(2bytes)
        return 0;
    }

    const uint8_t* Request::build_cmd(uint16_t& length)
    {
        if ((_func_code == 0x03 || _func_code == 0x04) && _register_coil_count == 0)
        {
            length = 0;
            return nullptr;
        }

        memset(_buffer, 0, sizeof(_buffer));
        _buffer[length++] = _slave_id;
        _buffer[length++] = _func_code;

        _buffer[length++] = _addr >> 8;
        _buffer[length++] = _addr & 0xff;

        _buffer[length++] = _register_coil_count >> 8;
        _buffer[length++] = _register_coil_count & 0xff;

        if (!_is_read_request(_func_code))
        {

        }
        uint16_t crc = crc16(_buffer, length);
        _buffer[length++] = crc & 0xff;
        _buffer[length++] = crc >> 8;

        return _buffer;
    }

    Response* Response::alloc(const uint8_t* buffer, uint16_t buffer_size)
    {
        Response* o = new Response();

        uint16_t idx = 0;
        o->_slave_id = buffer[idx++];
        o->_func_code = buffer[idx++];

        uint8_t data_length_in_byte = 0;
        memcpy(&data_length_in_byte, buffer + idx, sizeof(data_length_in_byte));
        idx += 1;

        o->_data_array.resize(data_length_in_byte / 2);
        if ((buffer_size - 3 - 2) / 2 != o->_data_array.size())
        {
            delete o;
            return nullptr;
        }
        for (uint8_t i = 0; i < data_length_in_byte / 2; ++i)
        {
            uint16_t temp = 0;
            uint8_t* ptemp = reinterpret_cast<uint8_t*>(&temp);
            ptemp[1] = *(buffer + (idx + i * 2));
            ptemp[0] = *(buffer + (idx + i * 2 + 1));
            o->_data_array[i] = temp;
        }
        return o;
    }

    Client* Client::alloc(const QString& name, QSerialPort::BaudRate baud, QSerialPort::Parity parity,
                          QSerialPort::DataBits data, QSerialPort::StopBits stop)
    {
        Client* o = new Client();
        o->m_serial.setPortName(name);
        o->m_serial.setBaudRate(baud);
        o->m_serial.setParity(parity);
        o->m_serial.setDataBits(data);
        o->m_serial.setStopBits(stop);
        if (!o->m_serial.open(QIODevice::ReadWrite))
        {
            delete o;
            o = nullptr;
        }
        return o;
    }

    void Client::destory(Client** o)
    {
        if (o == nullptr || *o == nullptr)
            return;

        (*o)->m_serial.close();
        delete (*o);
        *o = nullptr;
    }

    Response* Client::request(Request* req)
    {
        uint16_t cmd_length = 0;
        const uint8_t* cmd = req->build_cmd(cmd_length);
        qint64 ret = m_serial.write(reinterpret_cast<const char*>(cmd), cmd_length);
        if (ret != cmd_length)
            return nullptr;

        while (!m_serial.isReadable())
            QThread::msleep(1);

        char buffer[256];
        size_t recvn = 0;
        size_t recvd = 0;
        while ((recvn = m_serial.read(buffer + recvd, 256)) == 256)
            recvd += recvn;
        recvd += recvn;
        Response* response = Response::alloc(reinterpret_cast<const uint8_t*>(buffer), recvd);
        return response;
    }
};
